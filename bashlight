#!/usr/bin/env bash
#
# bashlight - adjust backlight brightness in bash.

set -euo pipefail

readonly VERSION=0.2.0
readonly MIN_BRIGHTNESS=1 # safe value to avoid a pitch-black screen

# Disable unicode for speed
LC_ALL=C
LANG=C

die() {
	printf 'error: %s\n' "$1" >&2
	exit 1
}

validate_environment() {
	[[ -d /sys/class/backlight ]] || die "backlight interface not available"
	local devices
	devices=(/sys/class/backlight/*)
	[[ -e "${devices[0]}" ]] || die "no backlight devices found"
}

validate_percentage() {
	local value=$1
	[[ $value =~ ^[0-9]+$ ]] || die "'$value' is not a valid number"
	[[ $value -ge 0 && $value -le 100 ]] || die "percentage must be between 0-100"
}

validate_positive_integer() {
	local value=$1 name=$2
	[[ $value =~ ^[0-9]+$ ]] || die "'$value' is not a valid number for $name"
	[[ $value -gt 0 ]] || die "$name must be greater than 0"
}

get_brightness() {
	validate_environment

	for device_path in /sys/class/backlight/*; do
		[[ -e "$device_path" ]] || continue
		[[ -r "$device_path/max_brightness" ]] || continue
		[[ -r "$device_path/actual_brightness" ]] || continue

		local max actual actual_percent
		max=$(<"$device_path/max_brightness")
		actual=$(<"$device_path/actual_brightness")
		actual_percent=$((actual * 100 / max))

		printf '%s\n' "device [$device_path]:"
		printf '%s\n' "  actual brightness level: $actual ($actual_percent%)"
		printf '%s\n' "  maximum brightness level: $max"
	done
}

set_brightness() {
	local operation=$1 time=${2:-200} steps=${3:-20}
	validate_environment

	# Pure bash floating-point calculation
	local delay
	delay=$(printf %.3f "$((10 ** 3 * time / steps / 1000))e-3")

	for device_path in /sys/class/backlight/*; do
		[[ -e "$device_path" ]] || continue
		[[ -r "$device_path/max_brightness" ]] || continue
		[[ -r "$device_path/actual_brightness" ]] || continue
		[[ -w "$device_path/brightness" ]] || continue

		local max actual target increment next_level
		max=$(<"$device_path/max_brightness")
		actual=$(<"$device_path/actual_brightness")

		case $operation in
		=*) target=$(clamp $((${operation#=} * max / 100)) "$MIN_BRIGHTNESS" "$max") ;;
		+*) target=$(clamp $((actual + ${operation#+} * max / 100)) "$MIN_BRIGHTNESS" "$max") ;;
		-*) target=$(clamp $((actual - ${operation#-} * max / 100)) "$MIN_BRIGHTNESS" "$max") ;;
		*) die "value '$operation' not processable" ;;
		esac

		# Skip if no change needed
		[[ $target -eq $actual ]] && continue

		# Calculate incremental value - ensure it's not zero
		increment=$(((target - actual) / steps))
		[[ $increment -eq 0 ]] && increment=$([[ $target -gt $actual ]] && echo 1 || echo -1)

		# Transition smoothly to target
		for ((i = 1; i <= steps; i++)); do
			if [[ $i -eq $steps ]]; then
				# Ensure we hit the exact target on the final step
				next_level=$target
			else
				next_level=$((actual + increment))
			fi

			printf '%s' "$next_level" >"$device_path/brightness"
			actual=$next_level

			# Sleep between steps
			read -rt "$delay" <> <(:) || :
		done
	done
}

clamp() {
	local value min max

	[[ $1 =~ ^[0-9]+$ ]] || die "'$1' is not a number"
	min=$2
	max=$3

	if [[ "$1" -lt $min ]]; then
		value=$min
	elif [[ "$1" -gt $max ]]; then
		value=$max
	else
		value=$1
	fi

	printf '%s\n' "$value"
}

print_usage() {
	printf %s "\
usage: ${0##*/} [options]
where options are:
  -help                    Print out a summary of the usage and exit
  -version                 Print out the program version and exit
  -get                     Print out the current brightness of each output
  -set <percentage>        Sets each backlight brightness to the specified level
  -inc <percentage>        Increases brightness by the specified amount
  -dec <percentage>        Decreases brightness by the specified amount
  -time <milliseconds>     Duration of transition to new value. Default is 200
  -steps <steps>           Number of transition steps. Default is 20
"
}

print_version() {
	printf "%s v%s\n" "${0##*/}" "$VERSION"
}

parse_args() {
	# Default values
	local time=200 steps=20

	while [[ $# -gt 0 ]]; do
		case $1 in
		-help)
			print_usage
			exit 0
			;;
		-version)
			print_version
			exit 0
			;;
		-get)
			get_brightness
			exit 0
			;;
		-set)
			[[ -n ${2:-} ]] || die "missing percentage for -set"
			validate_percentage "$2"
			set_brightness "=$2" "$time" "$steps"
			exit 0
			;;
		-inc)
			[[ -n ${2:-} ]] || die "missing percentage for -inc"
			validate_percentage "$2"
			set_brightness "+$2" "$time" "$steps"
			exit 0
			;;
		-dec)
			[[ -n ${2:-} ]] || die "missing percentage for -dec"
			validate_percentage "$2"
			set_brightness "-$2" "$time" "$steps"
			exit 0
			;;
		-time)
			[[ -n ${2:-} ]] || die "missing value for -time"
			validate_positive_integer "$2" "time"
			time=$2
			shift 2
			;;
		-steps)
			[[ -n ${2:-} ]] || die "missing value for -steps"
			validate_positive_integer "$2" "steps"
			steps=$2
			shift 2
			;;
		*)
			die "unknown option: $1"
			;;
		esac
	done

	# If we get here, no action was specified
	print_usage
}

main() {
	[[ $# -eq 0 ]] && print_usage && exit 0
	parse_args "$@"
}

main "$@"
